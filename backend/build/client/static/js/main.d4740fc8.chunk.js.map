{"version":3,"sources":["components/search/search.js","components/app/app.js","index.js"],"names":["Search","state","open","loading","fruits","selectedFruits","timer","handleChange","event","bounce","target","value","searchText","a","this","setState","api_uri","fetch","response","json","data","rows","alert","console","log","clearTimeout","setTimeout","getData","Paper","className","Typography","component","variant","Grid","container","item","md","Autocomplete","multiple","id","options","getOptionLabel","option","name","onClose","getOptionSelected","onChange","newValue","filter","indexOf","renderTags","tagValue","getTagProps","map","index","Chip","color","label","onDelete","splice","renderInput","params","TextField","placeholder","InputProps","endAdornment","Fragment","CircularProgress","size","Component","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAYqBA,E,4MACnBC,MAAQ,CACNC,MAAM,EACNC,SAAS,EACTC,OAAQ,GACRC,eAAe,I,EAEjBC,MAAQ,K,EAiBRC,aAAe,SAACC,GAAU,EAAKC,OAAOD,EAAME,OAAOC,Q,oFAfnD,WAAcC,GAAd,mBAAAC,EAAA,sEAEMC,KAAKC,SAAS,CAAEZ,SAAS,IACnBa,EAAUJ,EAAU,qBAAgBA,GAAe,QAH/D,SAI6BK,MAAMD,GAJnC,cAIYE,EAJZ,gBAKyBA,EAASC,OALlC,OAKYC,EALZ,OAMMN,KAAKC,SAAS,CACZZ,SAAS,EACTC,OAAQgB,EAAKC,OARrB,kDAWMC,MAAM,gBACNC,QAAQC,IAAR,MAZN,0D,2EAgBA,SAAOZ,GAAa,IAAD,OACXE,KAAKR,QACPmB,aAAaX,KAAKR,OAClBQ,KAAKR,MAAQ,MAEjBQ,KAAKR,MAAQoB,YAAW,WACpB,EAAKC,QAAQf,KACd,O,oBAEL,WAAU,IAAD,OACP,OACE,eAACgB,EAAA,EAAD,CAAOC,UAAU,QAAjB,UACK,cAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAnC,+CACH,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,kBACHC,QAAS1B,KAAKb,MAAMG,OACpBqC,eAAgB,SAACC,GAAD,OAAYA,EAAOC,MACnCxC,QAASW,KAAKb,MAAME,QACpByC,QAAS,WAAK,EAAK7B,SAAS,CAACX,OAAO,MACpCyC,kBAAmB,SAACH,EAAQ/B,GAAT,OAAmB+B,EAAOC,OAAShC,EAAMgC,MAC5DhC,MAAOG,KAAKb,MAAMI,eAChByC,SAAU,SAACtC,EAAOuC,GACd,IAAM1C,EAAc,sBAAO,EAAKJ,MAAMI,gBAAlB,YAAsC0C,EAASC,QAAO,SAACN,GAAD,OAA2D,IAA/C,EAAKzC,MAAMI,eAAe4C,QAAQP,QACxH,EAAK3B,SAAS,CAACV,oBAErB6C,WAAY,SAACC,EAAUC,GAAX,OACVD,EAASE,KAAI,SAACX,EAAQY,GAAT,OACX,cAACC,EAAA,EAAD,yBACEC,MAAM,UACNxB,QAAQ,WACRyB,MAAOf,EAAOC,MACVS,EAAY,CAAEE,WAJpB,IAKEI,SAAU,WACN,IAAMrD,EAAc,YAAO,EAAKJ,MAAMI,gBACtCA,EAAesD,OAAOL,EAAM,GAC5B,EAAKvC,SAAS,CAACV,2BAKzBuD,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEE7B,QAAQ,WACRyB,MAAM,SACNX,SAAU,EAAKvC,aACfwD,YAAY,aACZC,WAAU,2BACLH,EAAOG,YADF,IAERC,aACE,eAAC,IAAMC,SAAP,WACG,EAAKjE,MAAME,SACV,cAACgE,EAAA,EAAD,CAAkBX,MAAM,UAAUY,KAAM,KAEzCP,EAAOG,WAAWC,mC,GAlFPI,a,eCDrBC,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAAK3C,UAAU,OAAnC,SACE,cAAC,EAAD,OCDN4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.d4740fc8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Paper,\n  TextField,\n  CircularProgress,\n  Grid,\n  Chip,\n  Typography\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport \"./search.scss\";\nexport default class Search extends Component {\n  state = {\n    open: false,\n    loading: false,\n    fruits: [],\n    selectedFruits:[]\n  };\n  timer = null;\n  \n  async getData(searchText){\n    try {\n        this.setState({ loading: true });\n        const api_uri = searchText ?`/todo?name=${searchText}` : '/todo';\n        const response = await fetch(api_uri);\n        const data = await response.json();\n        this.setState({\n          loading: false,\n          fruits: data.rows,\n        });\n      } catch (error) {\n        alert(\"server error\");\n        console.log(error);\n      }\n  }\n  handleChange = (event)=> {this.bounce(event.target.value)};\n  bounce(searchText) {\n      if (this.timer) {\n        clearTimeout(this.timer);\n        this.timer = null;\n      }\n    this.timer = setTimeout(()=>{\n        this.getData(searchText);\n    }, 300);\n  }\n  render() {\n    return (\n      <Paper className=\"paper\">\n           <Typography component=\"h1\" variant=\"h6\">Search and select multiple Fruit </Typography>\n        <Grid container>\n          <Grid item md={12}>\n            <Autocomplete\n              multiple\n              id=\"multiple-select\"\n              options={this.state.fruits}\n              getOptionLabel={(option) => option.name}\n              loading={this.state.loading}\n              onClose={()=>{this.setState({fruits:[]})}}\n              getOptionSelected={(option, value) => option.name === value.name}\n              value={this.state.selectedFruits}\n                onChange={(event, newValue) => {\n                    const selectedFruits = [...this.state.selectedFruits,  ...newValue.filter((option) => this.state.selectedFruits.indexOf(option) === -1)];\n                    this.setState({selectedFruits});\n                }}\n              renderTags={(tagValue, getTagProps) =>\n                tagValue.map((option, index) => (\n                  <Chip\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    label={option.name}\n                    {...getTagProps({ index })}\n                    onDelete={()=>{\n                        const selectedFruits = [...this.state.selectedFruits];\n                        selectedFruits.splice(index,1);\n                        this.setState({selectedFruits});\n                    }}\n                  />\n                ))\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  label=\"Fruits\"\n                  onChange={this.handleChange}\n                  placeholder=\"Add New...\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <React.Fragment>\n                        {this.state.loading && (\n                          <CircularProgress color=\"primary\" size={20} />\n                        )}\n                        {params.InputProps.endAdornment}\n                      </React.Fragment>\n                    ),\n                  }}\n                />\n              )}\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n","import {Search} from '../';\nimport { Container} from '@material-ui/core';\nimport \"./app.scss\";\nfunction App() {\n  return (\n    <Container maxWidth=\"xl\" className=\"main\">\n      <Search/>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}